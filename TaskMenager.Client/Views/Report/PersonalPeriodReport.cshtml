@model PeriodViewModel

@{
    ViewData["Title"] = "Отчет на служител";
}

@{ var TaskList = new List<int>();}
@{ var dateList = new HashSet<DateTime>();}
@{ int hours = 1;}
@{ int sum = 0;}
@{ string rcolor = string.Empty;}
@{ string ropacity = "1.00";}
@{ string systemtaskname = string.Empty; ;}
@{ string dateMetaInfo = string.Empty;}
@{ string systemtaskMetaInfo = string.Empty;}
@Html.HiddenFor(model => model.userId, new { id = "employeeId" })
@*@{ bool lateReport = false;}*@

<div class="PrimeBox2 widthmobile" style="max-width:100%; position:relative; background-color:ghostwhite; margin-top:10px !important">
    <div class="form-group row" style="background-color: #69a0f1; display: flex; justify-content: center;  align-items: center;" id="container">
        <h5 style="color:white; margin-left:15px;">Периодичен отчет на @(Model.PersonalDateList.FullName)</h5>
        @*<button asp-controller="Tasks" asp-action="TasksList" id="x">
                X
            </button>*@
    </div>
    <div id="chartdiv" style="max-width:90%;"></div>
    <div>
        <table class="table table-bordered compact" style="width:100%">
            <thead style="display:table; width:100%; table-layout:fixed;">
                <tr>
                    <th style="width:7%;">Дата</th>
                    @foreach (var item in Model.PersonalDateList.WorkedHoursByTaskByPeriod)
                    {
                        if (!TaskList.Contains(item.TaskId) && item.TaskName != "Отпуски" && item.TaskName != "Болнични")
                        {
                            TaskList.Add(item.TaskId);
                            <th class="tasks" style="min-width:30px; max-height:200px; writing-mode: vertical-rl; font-size:smaller; text-transform:lowercase !important;">@(item.TaskName.Length > 60 ? (item.TaskName).Substring(0, 60) + "..." : item.TaskName)</th>
                        }

                        if (!dateList.Contains(item.WorkDate.Date))
                        {
                            dateList.Add(item.WorkDate.Date);
                        }
                    }
                    <th style="width: 5%; text-align: center">Общо</th>
                    @if (Model.ReportApproval)
                    {
                        <th style="width: 5%; text-align:center">Приет отчет</th>
                    }

                </tr>
            </thead>
            <tbody style="display: block;">

                @foreach (var worckedDate in dateList)
                {
                    var approvalAdmin = Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(w => w.WorkDate.Date == worckedDate.Date && w.HoursSpend > 0).Select(t => t.ApprovedAdminName).FirstOrDefault();
                    if (approvalAdmin == null)
                    {
                        approvalAdmin = "Служебно приет";
                    }
                    var isapproved = Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(w => w.WorkDate.Date == worckedDate.Date).All(t => t.ApprovedRecord == true);
                    systemtaskname = string.Empty;
                    ropacity = "1.00";
                    rcolor = string.Empty;
                    sum = 0;
                    var currentTask = Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(w => w.WorkDate.Date == worckedDate.Date && (w.TaskName == "Болнични" || w.TaskName == "Отпуски")).Select(t => new
                    {
                        taskName = t.TaskName,
                        inTimeRecord = t.InTimeRecord,
                        RegistrationDate = t.RegistrationDate
                    }).FirstOrDefault();
                    if (currentTask != null)
                    {
                        if (currentTask.taskName == "Отпуски")
                        {
                            //ropacity = "0.5";
                            rcolor = "cornflowerblue";
                            systemtaskname = "Отпуск";
                        }
                        else if (currentTask.taskName == "Болнични")
                        {
                            //ropacity = "0.5";
                            rcolor = "salmon";
                            systemtaskname = "Болничен";
                        }
                        if (Model.CheckRegistrationDate && !currentTask.inTimeRecord)
                        {
                            systemtaskMetaInfo = string.Format("Дата на въвеждане: {0}", currentTask.RegistrationDate.Value.Date.ToString("dd.MM.yyyy"));
                            systemtaskMetaInfo = systemtaskMetaInfo.Replace(" ", "_");

                        }
                        <tr style=" display: table; width: 100%; table-layout: fixed; background-color:@(rcolor); opacity:@(ropacity.ToString());">
                            <td style="width:7%; background-color:ghostwhite; opacity:1.00 !important;">@worckedDate.Date.ToString("dd/MM/yyyy")</td>
                            <td colspan="@(TaskList.Count)" class="@((!currentTask.inTimeRecord && Model.CheckRegistrationDate) ? (currentTask.taskName == "Отпуски" ? "otpuski tooltip-red" : "bolnichni tooltip-red") : "") tooltip-big-text" data-balloon-length=" xxlarge" aria-label=@(currentTask.inTimeRecord ? "" : systemtaskMetaInfo) data-balloon-pos="up"></td>
                            <td style="background-color:ivory; font-size: smaller; width: 5%; text-align: center;">@systemtaskname</td>
                            @if (Model.ReportApproval)
                            {
                                approvalAdmin = "Приел отчета-" + approvalAdmin;
                                approvalAdmin = approvalAdmin.Replace(" ", "_");
                        <td style="background-color:ivory; width: 5%; text-align: center;" class="tooltip-big-text" data-balloon-length="xxlarge" aria-label=@(isapproved ? approvalAdmin : "") data-balloon-pos="right"><input class="myinput large @(Model.UserCanApprove ? "canapprove" : "cannotapprove")" style="cursor:@(Model.UserCanApprove ? "pointer" : "")" type="checkbox" @(isapproved ? "checked" : "") data-dateaccept="@worckedDate.Date.ToString("yyyy/MM/dd")"></td>
                            }
                        </tr>
                    }
                    else
                    {
                        <tr style=" display: table; width: 100%; table-layout: fixed; @(Model.ReportApproval && isapproved ? "background-color:#f3fff3;" : "") /* even columns width , fix width of table too*/ ">
                            <td class="rowdate" style="width:7%; background-color:ghostwhite; opacity:1.00 !important;">@worckedDate.Date.ToString("dd/MM/yyyy")</td>
                            @foreach (var id in TaskList)
                            {
                                dateMetaInfo = string.Empty;
                                hours = Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(wh => wh.TaskId == id && wh.WorkDate.Date == worckedDate.Date).Select(wh => wh.HoursSpend).FirstOrDefault();
                                sum = sum + hours;
                                if (hours > 0)
                                {

                                    if (Model.CheckRegistrationDate)
                                    {
                                        var inttime = Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(wh => wh.TaskId == id && wh.WorkDate.Date == worckedDate.Date).Select(wh => wh.InTimeRecord).FirstOrDefault();
                                        if (!inttime)
                                        {
                                            dateMetaInfo = string.Format("Часовете са въведени след отчетния период! Дата на въвеждане: {0}", Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(wh => wh.TaskId == id && wh.WorkDate.Date == worckedDate.Date).Select(wh => wh.RegistrationDate.Value.Date.ToString("dd.MM.yyyy")).FirstOrDefault());
                                        }
                                        dateMetaInfo = dateMetaInfo.Replace(" ", "_");
                                    }


                                    <td style="text-align: center;   @(dateMetaInfo.Length != 0 ? "background-color:#fee9e9; color:red;" : "")" class="tooltip-big-text @(dateMetaInfo.Length != 0 ? "" : "setcolor")" @(dateMetaInfo.Length != 0 ? "tooltip-red" : "") data-balloon-length="xxlarge" aria-label=@dateMetaInfo data-balloon-pos="up"><strong>@(hours > 0 ? hours.ToString() : "")</strong></td>
                                    //@(hours > 0 ? hours.ToString() : "")
                                }
                                else
                                {
                                    <td class="setcolor"></td>
                                    //style = "@(dateMetaInfo.Length!=0 ? "background - color:#fee9e9; color:red;" : "")"    @(lateReport ? "systemlate" : "")
                                }
                            }
                            <td style="background-color: ivory; font-size: medium; width: 5%; text-align: center;"><strong>@sum</strong></td>
                            @if (Model.ReportApproval)
                            {
                                approvalAdmin = "Приел отчета-" + approvalAdmin;
                                approvalAdmin = approvalAdmin.Replace(" ", "_");
                        <td style="background-color: ivory; width: 5%; text-align: center;" class="tooltip-big-text" data-balloon-length="xxlarge" aria-label=@(isapproved ? approvalAdmin : "") data-balloon-pos="right"><input class="myinput large @(Model.UserCanApprove ? "canapprove" : "cannotapprove")" style="cursor:@(Model.UserCanApprove ? "pointer" : "")" type="checkbox" @(isapproved ? "checked" : "") data-dateaccept="@worckedDate.Date.ToString("yyyy/MM/dd")"></td>
                            }
                        </tr>
                    }
                }
                <tr style="background-color:ivory; font-size:medium; display: table; width: 100%; table-layout: fixed;">
                    <td style="width:7%;">Общо:</td>
                    @{sum = 0; }
                    @foreach (var id in TaskList)
                    {
                        hours = Model.PersonalDateList.WorkedHoursByTaskByPeriod.Where(wh => wh.TaskId == id).Sum(wh => wh.HoursSpend);
                        <td class="hours" style="text-align: center;"><strong>@hours</strong></td>
                        sum += hours;
                    }
                    <td style="width: 5%; text-align: center;"><strong>@sum</strong></td>
                    @if (Model.ReportApproval)
                    {
                        <td style="width: 5%; text-align: center;"><strong></strong></td>
                    }
                </tr>
            </tbody>
        </table>
        @if (Model.CheckRegistrationDate)
        {
            <div class="row">
                <div class="col-md-1 offset-1" style="background-color: #fee9e9; color: red; display: flex; justify-content: center; align-items: center;"> x </div>
                <div class="col-md-10">Часовете са въведени след отчетния период! Ден на отчета: @(Model.ReportDay).</div>
            </div>
        }
        <form method="get" asp-action="ExportSpravkaForEmployee" asp-controller="Report">
            <input asp-for="userId" class="form-control" hidden />
            <input asp-for="StartDate" class="form-control" nopicker="true" hidden />
            <input asp-for="EndDate" class="form-control" nopicker="true" hidden />
            <div style="display: flex; justify-content: center;  align-items: center;">
                <input type="submit" class="btn button save" value="Експорт в Ексел" id="realsend" />
                <a class="button btncansel" style="margin-left:15px;" asp-action="UsersList" asp-controller="Users">
                    Списък експерти
                </a>
            </div>
        </form>
    </div>
</div>
<link href="~/css/report.css" rel="stylesheet">
<script src="~/js/pperiodreport.js"></script>
<script src="~/js/core.js"></script>
<script src="~/js/charts.js"></script>
<script src="~/js/animated.js"></script>

<script type="text/javascript">

    function GetData() {
        let pieData = [];
        let elements = $(".tasks").toArray();
        let hoursSum = $(".hours").toArray();
        for (var i = 0; i < elements.length; i++) {
            var current = elements[i];
            if (current.children.length === 0 && current.textContent.replace(/ |\n/g, '') !== '') {
                // Check the element has no children && that it is not empty
                var task = { name: current.textContent, hours: hoursSum[i].textContent };
                pieData.push(task);
            }
        }
        return pieData;
    }

    am4core.ready(function () {

        // Themes begin
        am4core.useTheme(am4themes_animated);

        // Themes end

        // Create chart instance
        var chart = am4core.create("chartdiv", am4charts.PieChart);

        // Add data
        chart.data = GetData();


        // Add and configure Series
        var pieSeries = chart.series.push(new am4charts.PieSeries());
        pieSeries.dataFields.value = "hours";
        pieSeries.dataFields.category = "name";
        pieSeries.slices.template.stroke = am4core.color("#fff");
        pieSeries.slices.template.strokeWidth = 2;
        pieSeries.slices.template.strokeOpacity = 1;
        pieSeries.alignLabels = true;

        // This creates initial animation
        pieSeries.hiddenState.properties.opacity = 1;
        pieSeries.hiddenState.properties.endAngle = -90;
        pieSeries.hiddenState.properties.startAngle = -90;

    }); // end am4core.ready()
</script>
