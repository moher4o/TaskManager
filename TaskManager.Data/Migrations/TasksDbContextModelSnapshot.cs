// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data;

namespace TaskManager.Data.Migrations
{
    [DbContext(typeof(TasksDbContext))]
    partial class TasksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.Data.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TaskManager.Data.Models.Directorate", b =>
                {
                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("DirectorateId");

                    b.ToTable("Directorates");
                });

            modelBuilder.Entity("TaskManager.Data.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DaeuAccaunt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("JobTitleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("SectorId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TaskManager.Data.Models.JobTitle", b =>
                {
                    b.Property<string>("JobTitleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("TaskManager.Data.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PriorityId");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("TaskManager.Data.Models.Sector", b =>
                {
                    b.Property<string>("SectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SectorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("TaskManager.Data.Models.TasksStatus", b =>
                {
                    b.Property<int>("TasksStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TasksStatusId");

                    b.ToTable("TasksStatuses");
                });

            modelBuilder.Entity("TaskManager.Data.Models.TasksType", b =>
                {
                    b.Property<int>("TasksTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("TasksTypeId");

                    b.ToTable("TasksTypes");
                });

            modelBuilder.Entity("TaskManager.Data.Models.Department", b =>
                {
                    b.HasOne("TaskManager.Data.Models.Directorate", "Directorate")
                        .WithMany("Departments")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TaskManager.Data.Models.Employee", b =>
                {
                    b.HasOne("TaskManager.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("TaskManager.Data.Models.Directorate", "Directorate")
                        .WithMany("Employees")
                        .HasForeignKey("DirectorateId");

                    b.HasOne("TaskManager.Data.Models.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("TaskManager.Data.Models.Sector", "Sector")
                        .WithMany("Employees")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("TaskManager.Data.Models.Sector", b =>
                {
                    b.HasOne("TaskManager.Data.Models.Department", "Department")
                        .WithMany("Sectors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaskManager.Data.Models.Directorate", "Directorate")
                        .WithMany("Sectors")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
